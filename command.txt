terraform plan | grep <resource> | grep id 
terraform state rm <resource>
terraform destroy
terraform import <resource> <ID>

---
 {
    "architecture": "x64",
    "offer": "mysql",
    "publisher": "jetware-srl",
    "sku": "mysql57-ubuntu-1604",
    "urn": "jetware-srl:mysql:mysql57-ubuntu-1604:1.0.170503",
    "version": "1.0.170503"
  },
----

# DATA TIER
resource "azurerm_linux_virtual_machine" "data_app" {
  name                  = var.data_app_name
  location              = var.resource_group_location
  resource_group_name   = var.resource_group_name
  network_interface_ids = [azurerm_network_interface.nic_data_tier.id]
  size                  = "Standard_B2als_v2"

  os_disk {
    name                 = "${var.data_app_name}-OsDisk"
    caching              = "ReadWrite"
    storage_account_type = "Premium_LRS"
  }

  source_image_reference {
    publisher = "jetware-srl"
    offer     = "mysql"
    sku       = "mysql57-ubuntu-1604"
    version   = "1.0.170503"
  }

  computer_name                   = "dataApp"
  admin_username                  = "azureuser"
  disable_password_authentication = true

  admin_ssh_key {
    username   = "azureuser"
    public_key = tls_private_key.tls_ssh.public_key_openssh
  }

  boot_diagnostics {
    storage_account_uri = azurerm_storage_account.storage.primary_blob_endpoint
  }

  tags = {
    environment = "production"
  }
}

mysql --user={{ mysql_users[0].name }} --database=test --password={{ mysql_users[0].password }} < /home/azureuser/test.sql